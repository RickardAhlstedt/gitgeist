package cmd

import (
	"fmt"
	"os"
	"path/filepath"
	"regexp"
	"strings"

	"github.com/RickardAhlstedt/gitgeist/internal"
	"github.com/spf13/cobra"
)

var generateExplanationsCmd = &cobra.Command{
	Use:   "generate-docs",
	Short: "Generate documentation for commit and file inspection patterns",
	Long:  `Generates markdown files for each commit and file inspection pattern with explanations, organized under docs/cmt-msg and docs/file, plus an index.md.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		baseDir := "docs"
		commitDir := filepath.Join(baseDir, "cmt-msg")
		fileDir := filepath.Join(baseDir, "file")

		// Create directories if not exist
		for _, d := range []string{commitDir, fileDir} {
			err := os.MkdirAll(d, 0755)
			if err != nil {
				return fmt.Errorf("failed to create directory %s: %w", d, err)
			}
		}

		// Create docs/_config.yml for GitHub Pages with minimal styling
		configContent := `theme: jekyll-theme-cayman
title: Gitgeist Pattern Explanations
description: Documentation for commit and file inspection patterns used by Gitgeist
`
		configPath := filepath.Join(baseDir, "_config.yml")
		if err := os.WriteFile(configPath, []byte(configContent), 0644); err != nil {
			return fmt.Errorf("failed to write _config.yml: %w", err)
		}

		// Helper to sanitize pattern strings into safe filenames
		sanitize := func(pattern string) string {
			// Remove (?i) or similar regex prefixes
			pattern = regexp.MustCompile(`(?i)\(\?[a-z]+\)`).ReplaceAllString(pattern, "")
			// Extract alphanumeric words
			re := regexp.MustCompile(`[a-zA-Z0-9]+`)
			words := re.FindAllString(pattern, -1)
			if len(words) == 0 {
				return "pattern"
			}
			return strings.ToLower(words[len(words)-1])
		}

		// Maps of patterns & explanations from internal package
		commitPatterns := internal.CommitMessagePatternExplanations
		filePatterns := internal.FileInspectionPatternExplanations

		// Front matter to prepend to each pattern file
		fileFrontMatter := "---\nlayout: default\n---\n\n"

		// Generate commit pattern docs
		for pattern, explanation := range commitPatterns {
			filename := sanitize(pattern) + ".md"
			path := filepath.Join(commitDir, filename)
			content := fmt.Sprintf(
				"%s# Pattern: `%s`\n\n## Explanation\n\n%s\n\n---\n\n*This document was generated by Gitgeist.*\n",
				fileFrontMatter, pattern, explanation)

			if err := os.WriteFile(path, []byte(content), 0644); err != nil {
				return fmt.Errorf("failed to write commit pattern doc %s: %w", path, err)
			}
		}

		// Generate file pattern docs
		for pattern, explanation := range filePatterns {
			filename := sanitize(pattern) + ".md"
			path := filepath.Join(fileDir, filename)
			content := fmt.Sprintf(
				"%s# Pattern: `%s`\n\n## Explanation\n\n%s\n\n---\n\n*This document was generated by Gitgeist.*\n",
				fileFrontMatter, pattern, explanation)

			if err := os.WriteFile(path, []byte(content), 0644); err != nil {
				return fmt.Errorf("failed to write file pattern doc %s: %w", path, err)
			}
		}

		// Generate index.md with front matter
		var indexBuilder strings.Builder
		indexBuilder.WriteString("---\nlayout: default\ntitle: Gitgeist Pattern Explanations\n---\n\n")
		indexBuilder.WriteString("# Gitgeist Pattern Explanations\n\n")

		indexBuilder.WriteString("## Commit Message Patterns\n\n")
		for pattern := range commitPatterns {
			filename := sanitize(pattern) + ".md"
			indexBuilder.WriteString(fmt.Sprintf("- [`%s`](cmt-msg/%s)\n", pattern, filename))
		}
		indexBuilder.WriteString("\n## File Inspection Patterns\n\n")
		for pattern := range filePatterns {
			filename := sanitize(pattern) + ".md"
			indexBuilder.WriteString(fmt.Sprintf("- [`%s`](file/%s)\n", pattern, filename))
		}

		indexPath := filepath.Join(baseDir, "index.md")
		if err := os.WriteFile(indexPath, []byte(indexBuilder.String()), 0644); err != nil {
			return fmt.Errorf("failed to write index.md: %w", err)
		}

		cmd.Println("âœ… Documentation generated successfully in docs/")
		return nil
	},
}

func init() {
	rootCmd.AddCommand(generateExplanationsCmd)
}
